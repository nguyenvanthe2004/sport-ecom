import React, { useState, useEffect } from "react";
import "../../styles/AdminOrders.css";
import {
  Eye,
  Trash2,
  Edit,
  Package,
  Search,
  Filter,
  X,
  Check,
  Clock,
  Truck,
  XCircle,
  CheckCircle,
} from "lucide-react";
import { OrderAPI } from "../../services/api";
import LoadingPage from "../../components/LoadingPage";

const AdminOrders = () => {
  const [orders, setOrders] = useState([]);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [status, setStatus] = useState("");
  const [paymentStatus, setPaymentStatus] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [showFilters, setShowFilters] = useState(false);
  const [loading, setLoading] = useState(true);

  // ‚úÖ L·∫•y danh s√°ch ƒë∆°n h√†ng
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const data = await OrderAPI.getAll();
        setOrders(data);
      } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchOrders();
  }, []);

  const getStatusIcon = (status) => {
    switch (status) {
      case "pending":
        return <Clock size={16} />;
      case "shipped":
        return <Truck size={16} />;
      case "delivered":
        return <CheckCircle size={16} />;
      case "cancelled":
        return <XCircle size={16} />;
      default:
        return <Package size={16} />;
    }
  };

  const getStatusLabel = (status) => {
    const labels = {
      pending: "Ch·ªù x·ª≠ l√Ω",
      shipped: "ƒêang giao",
      delivered: "ƒê√£ giao",
      cancelled: "ƒê√£ h·ªßy",
    };
    return labels[status] || status;
  };

  // ‚úÖ L·ªçc ƒë∆°n h√†ng theo t√¨m ki·∫øm + tr·∫°ng th√°i
  const filteredOrders = orders.filter((order) => {
    const matchesSearch =
      order._id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.userId?.fullname?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter =
      filterStatus === "all" || order.status === filterStatus;
    return matchesSearch && matchesFilter;
  });

  // ‚úÖ Xem chi ti·∫øt
  const handleView = (order) => {
    setSelectedOrder(order);
    setEditMode(false);
  };

  // ‚úÖ B·∫≠t ch·∫ø ƒë·ªô s·ª≠a
  const handleEdit = (order) => {
    setSelectedOrder(order);
    setStatus(order.status);
    setPaymentStatus(order.paymentStatus);
    setEditMode(true);
  };

  // ‚úÖ G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i
  const handleUpdate = async () => {
    try {
      await OrderAPI.updateStatus(selectedOrder._id, { status, paymentStatus });
      showToast("B·∫°n ƒë√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      setEditMode(false);
      setSelectedOrder(null);
      const data = await OrderAPI.getAll();
      setOrders(data);
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
      showToast("C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    }
  };

  // ‚úÖ G·ªçi API x√≥a ƒë∆°n h√†ng
  const handleDelete = async (id) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng n√†y kh√¥ng?")) return;
    try {
      await OrderAPI.delete(id);
      alert("üóëÔ∏è ƒê√£ x√≥a ƒë∆°n h√†ng th√†nh c√¥ng!");
      setOrders((prev) => prev.filter((o) => o._id !== id));
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a:", error);
    }
  };

  // ‚úÖ Th·ªëng k√™ tr·∫°ng th√°i
  const statusCounts = {
    all: orders.length,
    pending: orders.filter((o) => o.status === "pending").length,
    shipped: orders.filter((o) => o.status === "shipped").length,
    delivered: orders.filter((o) => o.status === "delivered").length,
    cancelled: orders.filter((o) => o.status === "cancelled").length,
  };
  const showToast = (message) => {
    const toast = document.createElement("div");
    toast.className = "toast-notification";
    toast.innerHTML = `
      <div class="toast-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
      </div>
      <span class="toast-message">${message}</span>
    `;
    document.body.appendChild(toast);

    setTimeout(() => toast.classList.add("show"), 100);
    setTimeout(() => {
      toast.classList.remove("show");
      setTimeout(() => toast.remove(), 300);
    }, 3000);
  };

  if (loading) return <LoadingPage />;
  return (
    <div className="admin-orders-page">
      <div className="admin-orders-container">
        {/* Header */}
        <div className="page-header">
          <h1 className="page-title">
            <Package size={32} /> Qu·∫£n l√Ω ƒë∆°n h√†ng
          </h1>
          <p className="page-subtitle">Theo d√µi v√† qu·∫£n l√Ω t·∫•t c·∫£ ƒë∆°n h√†ng</p>
        </div>

        {/* Stats Cards */}
        <div className="stats-grid">
          {[
            { key: "all", label: "T·∫•t c·∫£", color: "blue" },
            { key: "pending", label: "Ch·ªù x·ª≠ l√Ω", color: "yellow" },
            { key: "shipped", label: "ƒêang giao", color: "purple" },
            { key: "delivered", label: "ƒê√£ giao", color: "green" },
            { key: "cancelled", label: "ƒê√£ h·ªßy", color: "red" },
          ].map((stat) => (
            <div
              key={stat.key}
              onClick={() => setFilterStatus(stat.key)}
              className={`stat-card ${
                filterStatus === stat.key ? "active" : ""
              }`}
            >
              <div className="stat-content">
                <div>
                  <p className="stat-label">{stat.label}</p>
                  <p className="stat-value">{statusCounts[stat.key]}</p>
                </div>
                <div className={`stat-icon ${stat.color}`}>
                  {getStatusIcon(stat.key)}
                </div>
              </div>
            </div>
          ))}
        </div>
        {/* Search Bar */}
        <div className="search-bar">
          <div className="search-wrapper">
            <div className="search-input-wrapper">
              <Search className="search-icon" size={20} />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo m√£ ƒë∆°n h√†ng ho·∫∑c t√™n kh√°ch h√†ng..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="filter-button"
            >
              <Filter size={20} /> B·ªô l·ªçc
            </button>
          </div>
        </div>

        {/* Orders Table */}
        <div className="orders-table-container">
          {filteredOrders.length === 0 ? (
            <div className="empty-state">
              <Package size={48} />
              <p>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o</p>
            </div>
          ) : (
            <div className="table-wrapper">
              <table className="orders-table">
                <thead>
                  <tr>
                    <th>M√£ ƒë∆°n</th>
                    <th>Kh√°ch h√†ng</th>
                    <th>ƒê·ªãa ch·ªâ</th>
                    <th>T·ªïng ti·ªÅn</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thanh to√°n</th>
                    <th>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredOrders.map((order) => (
                    <tr key={order._id}>
                      <td>
                        <span className="order-id">{order._id}</span>
                      </td>
                      <td>
                        <span className="customer-name">
                          {order.userId?.fullname || "‚Äî"}
                        </span>
                      </td>
                      <td>
                        <span className="address">{order.shippingAddress}</span>
                      </td>
                      <td>
                        <span className="total-price">
                          {order.totalPrice?.toLocaleString("vi-VN")}‚Ç´
                        </span>
                      </td>
                      <td>
                        <span className={`status-badge status-${order.status}`}>
                          {getStatusIcon(order.status)}{" "}
                          {getStatusLabel(order.status)}
                        </span>
                      </td>
                      <td>
                        <span
                          className={`payment-badge payment-${order.paymentStatus}`}
                        >
                          {order.paymentStatus === "paid" ? (
                            <Check size={14} />
                          ) : (
                            <X size={14} />
                          )}
                          {order.paymentStatus === "paid"
                            ? "ƒê√£ thanh to√°n"
                            : "Ch∆∞a thanh to√°n"}
                        </span>
                      </td>
                      <td>
                        <div className="action-buttons">
                          <button
                            onClick={() => handleView(order)}
                            className="action-btn view-btn"
                            title="Xem chi ti·∫øt"
                          >
                            <Eye size={18} />
                          </button>
                          <button
                            onClick={() => handleEdit(order)}
                            className="action-btn edit-btn"
                            title="S·ª≠a tr·∫°ng th√°i"
                          >
                            <Edit size={18} />
                          </button>
                          <button
                            onClick={() => handleDelete(order._id)}
                            className="action-btn delete-btn"
                            title="X√≥a"
                          >
                            <Trash2 size={18} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* ‚úÖ Modal ch·ªânh s·ª≠a */}
        {editMode && selectedOrder && (
          <div className="modal-overlay">
            <div className="modal-dialog modal-edit">
              <div className="modal-header">
                <h3>C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng</h3>
              </div>

              <div className="modal-body">
                <label className="form-label">Tr·∫°ng th√°i ƒë∆°n h√†ng</label>
                <select
                  value={status}
                  onChange={(e) => setStatus(e.target.value)}
                  className="form-select"
                >
                  <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
                  <option value="shipped">ƒêang giao</option>
                  <option value="delivered">ƒê√£ giao</option>
                  <option value="cancelled">ƒê√£ h·ªßy</option>
                </select>

                <label className="form-label">Tr·∫°ng th√°i thanh to√°n</label>
                <select
                  value={paymentStatus}
                  onChange={(e) => setPaymentStatus(e.target.value)}
                  className="form-select"
                >
                  <option value="unpaid">Ch∆∞a thanh to√°n</option>
                  <option value="paid">ƒê√£ thanh to√°n</option>
                  <option value="pending">ƒêang x·ª≠ l√Ω</option>
                </select>
              </div>

              <div className="modal-footer">
                <button
                  onClick={() => setEditMode(false)}
                  className="btn btn-secondary"
                >
                  H·ªßy
                </button>
                <button onClick={handleUpdate} className="btn btn-primary">
                  L∆∞u thay ƒë·ªïi
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminOrders;
